//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSFFireData.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RSFFireEntities : DbContext
    {
        public RSFFireEntities()
            : base("name=RSFFireEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Fee> Fees { get; set; }
        public virtual DbSet<JournalEntry> JournalEntries { get; set; }
        public virtual DbSet<Ordinance> Ordinances { get; set; }
        public virtual DbSet<Parcel> Parcels { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Street> Streets { get; set; }
        public virtual DbSet<ProjectList> ProjectLists { get; set; }
    
        public virtual int usp_DocumentsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_DocumentsInsert_Result> usp_DocumentsInsert(string type, string location, Nullable<int> projectId, Nullable<int> parcelId, Nullable<int> parcel_id, Nullable<int> project_id)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var parcelIdParameter = parcelId.HasValue ?
                new ObjectParameter("ParcelId", parcelId) :
                new ObjectParameter("ParcelId", typeof(int));
    
            var parcel_idParameter = parcel_id.HasValue ?
                new ObjectParameter("Parcel_id", parcel_id) :
                new ObjectParameter("Parcel_id", typeof(int));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentsInsert_Result>("usp_DocumentsInsert", typeParameter, locationParameter, projectIdParameter, parcelIdParameter, parcel_idParameter, project_idParameter);
        }
    
        public virtual ObjectResult<usp_DocumentsSelect_Result> usp_DocumentsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentsSelect_Result>("usp_DocumentsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_DocumentsUpdate_Result> usp_DocumentsUpdate(Nullable<int> id, string type, string location, Nullable<int> projectId, Nullable<int> parcelId, Nullable<int> parcel_id, Nullable<int> project_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var parcelIdParameter = parcelId.HasValue ?
                new ObjectParameter("ParcelId", parcelId) :
                new ObjectParameter("ParcelId", typeof(int));
    
            var parcel_idParameter = parcel_id.HasValue ?
                new ObjectParameter("Parcel_id", parcel_id) :
                new ObjectParameter("Parcel_id", typeof(int));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentsUpdate_Result>("usp_DocumentsUpdate", idParameter, typeParameter, locationParameter, projectIdParameter, parcelIdParameter, parcel_idParameter, project_idParameter);
        }
    
        public virtual int usp_FeesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FeesDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_FeesInsert_Result> usp_FeesInsert(string description, Nullable<int> ordinanceId, Nullable<int> projectId, Nullable<decimal> fee1, Nullable<int> qty, Nullable<decimal> amtPaid, string paidWith, string reference, Nullable<int> contactId, Nullable<bool> oTRequest, Nullable<int> planCheckerId, Nullable<bool> passFail, string pCKType, Nullable<System.DateTime> notifiedOn, Nullable<System.DateTime> pickedUpOn, string pickedUpBy, string notes, Nullable<int> project_id, Nullable<int> person_id, Nullable<int> ordinance_id)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var ordinanceIdParameter = ordinanceId.HasValue ?
                new ObjectParameter("OrdinanceId", ordinanceId) :
                new ObjectParameter("OrdinanceId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var fee1Parameter = fee1.HasValue ?
                new ObjectParameter("Fee1", fee1) :
                new ObjectParameter("Fee1", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var amtPaidParameter = amtPaid.HasValue ?
                new ObjectParameter("AmtPaid", amtPaid) :
                new ObjectParameter("AmtPaid", typeof(decimal));
    
            var paidWithParameter = paidWith != null ?
                new ObjectParameter("PaidWith", paidWith) :
                new ObjectParameter("PaidWith", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var oTRequestParameter = oTRequest.HasValue ?
                new ObjectParameter("OTRequest", oTRequest) :
                new ObjectParameter("OTRequest", typeof(bool));
    
            var planCheckerIdParameter = planCheckerId.HasValue ?
                new ObjectParameter("PlanCheckerId", planCheckerId) :
                new ObjectParameter("PlanCheckerId", typeof(int));
    
            var passFailParameter = passFail.HasValue ?
                new ObjectParameter("PassFail", passFail) :
                new ObjectParameter("PassFail", typeof(bool));
    
            var pCKTypeParameter = pCKType != null ?
                new ObjectParameter("PCKType", pCKType) :
                new ObjectParameter("PCKType", typeof(string));
    
            var notifiedOnParameter = notifiedOn.HasValue ?
                new ObjectParameter("NotifiedOn", notifiedOn) :
                new ObjectParameter("NotifiedOn", typeof(System.DateTime));
    
            var pickedUpOnParameter = pickedUpOn.HasValue ?
                new ObjectParameter("PickedUpOn", pickedUpOn) :
                new ObjectParameter("PickedUpOn", typeof(System.DateTime));
    
            var pickedUpByParameter = pickedUpBy != null ?
                new ObjectParameter("PickedUpBy", pickedUpBy) :
                new ObjectParameter("PickedUpBy", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            var ordinance_idParameter = ordinance_id.HasValue ?
                new ObjectParameter("Ordinance_id", ordinance_id) :
                new ObjectParameter("Ordinance_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FeesInsert_Result>("usp_FeesInsert", descriptionParameter, ordinanceIdParameter, projectIdParameter, fee1Parameter, qtyParameter, amtPaidParameter, paidWithParameter, referenceParameter, contactIdParameter, oTRequestParameter, planCheckerIdParameter, passFailParameter, pCKTypeParameter, notifiedOnParameter, pickedUpOnParameter, pickedUpByParameter, notesParameter, project_idParameter, person_idParameter, ordinance_idParameter);
        }
    
        public virtual ObjectResult<usp_FeesSelect_Result> usp_FeesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FeesSelect_Result>("usp_FeesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_FeesUpdate_Result> usp_FeesUpdate(Nullable<int> id, string description, Nullable<int> ordinanceId, Nullable<int> projectId, Nullable<decimal> fee1, Nullable<int> qty, Nullable<decimal> amtPaid, string paidWith, string reference, Nullable<int> contactId, Nullable<bool> oTRequest, Nullable<int> planCheckerId, Nullable<bool> passFail, string pCKType, Nullable<System.DateTime> notifiedOn, Nullable<System.DateTime> pickedUpOn, string pickedUpBy, string notes, Nullable<int> project_id, Nullable<int> person_id, Nullable<int> ordinance_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var ordinanceIdParameter = ordinanceId.HasValue ?
                new ObjectParameter("OrdinanceId", ordinanceId) :
                new ObjectParameter("OrdinanceId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var fee1Parameter = fee1.HasValue ?
                new ObjectParameter("Fee1", fee1) :
                new ObjectParameter("Fee1", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var amtPaidParameter = amtPaid.HasValue ?
                new ObjectParameter("AmtPaid", amtPaid) :
                new ObjectParameter("AmtPaid", typeof(decimal));
    
            var paidWithParameter = paidWith != null ?
                new ObjectParameter("PaidWith", paidWith) :
                new ObjectParameter("PaidWith", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var oTRequestParameter = oTRequest.HasValue ?
                new ObjectParameter("OTRequest", oTRequest) :
                new ObjectParameter("OTRequest", typeof(bool));
    
            var planCheckerIdParameter = planCheckerId.HasValue ?
                new ObjectParameter("PlanCheckerId", planCheckerId) :
                new ObjectParameter("PlanCheckerId", typeof(int));
    
            var passFailParameter = passFail.HasValue ?
                new ObjectParameter("PassFail", passFail) :
                new ObjectParameter("PassFail", typeof(bool));
    
            var pCKTypeParameter = pCKType != null ?
                new ObjectParameter("PCKType", pCKType) :
                new ObjectParameter("PCKType", typeof(string));
    
            var notifiedOnParameter = notifiedOn.HasValue ?
                new ObjectParameter("NotifiedOn", notifiedOn) :
                new ObjectParameter("NotifiedOn", typeof(System.DateTime));
    
            var pickedUpOnParameter = pickedUpOn.HasValue ?
                new ObjectParameter("PickedUpOn", pickedUpOn) :
                new ObjectParameter("PickedUpOn", typeof(System.DateTime));
    
            var pickedUpByParameter = pickedUpBy != null ?
                new ObjectParameter("PickedUpBy", pickedUpBy) :
                new ObjectParameter("PickedUpBy", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            var ordinance_idParameter = ordinance_id.HasValue ?
                new ObjectParameter("Ordinance_id", ordinance_id) :
                new ObjectParameter("Ordinance_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FeesUpdate_Result>("usp_FeesUpdate", idParameter, descriptionParameter, ordinanceIdParameter, projectIdParameter, fee1Parameter, qtyParameter, amtPaidParameter, paidWithParameter, referenceParameter, contactIdParameter, oTRequestParameter, planCheckerIdParameter, passFailParameter, pCKTypeParameter, notifiedOnParameter, pickedUpOnParameter, pickedUpByParameter, notesParameter, project_idParameter, person_idParameter, ordinance_idParameter);
        }
    
        public virtual int usp_JournalEntriesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_JournalEntriesDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_JournalEntriesInsert_Result> usp_JournalEntriesInsert(string text, Nullable<int> projectId, Nullable<int> project_id)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JournalEntriesInsert_Result>("usp_JournalEntriesInsert", textParameter, projectIdParameter, project_idParameter);
        }
    
        public virtual ObjectResult<usp_JournalEntriesSelect_Result> usp_JournalEntriesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JournalEntriesSelect_Result>("usp_JournalEntriesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_JournalEntriesUpdate_Result> usp_JournalEntriesUpdate(Nullable<int> id, string text, Nullable<int> projectId, Nullable<int> project_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_JournalEntriesUpdate_Result>("usp_JournalEntriesUpdate", idParameter, textParameter, projectIdParameter, project_idParameter);
        }
    
        public virtual int usp_OrdinancesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrdinancesDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_OrdinancesInsert_Result> usp_OrdinancesInsert(string number, string description)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrdinancesInsert_Result>("usp_OrdinancesInsert", numberParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_OrdinancesSelect_Result> usp_OrdinancesSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrdinancesSelect_Result>("usp_OrdinancesSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_OrdinancesUpdate_Result> usp_OrdinancesUpdate(Nullable<int> id, string number, string description)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrdinancesUpdate_Result>("usp_OrdinancesUpdate", idParameter, numberParameter, descriptionParameter);
        }
    
        public virtual int usp_ParcelsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ParcelsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_ParcelsInsert_Result> usp_ParcelsInsert(string aPN, Nullable<int> ownerId, string address, string city, string state, string zip, Nullable<int> streetId, Nullable<int> streets_id, Nullable<int> person_id)
        {
            var aPNParameter = aPN != null ?
                new ObjectParameter("APN", aPN) :
                new ObjectParameter("APN", typeof(string));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var streetIdParameter = streetId.HasValue ?
                new ObjectParameter("StreetId", streetId) :
                new ObjectParameter("StreetId", typeof(int));
    
            var streets_idParameter = streets_id.HasValue ?
                new ObjectParameter("Streets_id", streets_id) :
                new ObjectParameter("Streets_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ParcelsInsert_Result>("usp_ParcelsInsert", aPNParameter, ownerIdParameter, addressParameter, cityParameter, stateParameter, zipParameter, streetIdParameter, streets_idParameter, person_idParameter);
        }
    
        public virtual ObjectResult<usp_ParcelsSelect_Result> usp_ParcelsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ParcelsSelect_Result>("usp_ParcelsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_ParcelsUpdate_Result> usp_ParcelsUpdate(Nullable<int> id, string aPN, Nullable<int> ownerId, string address, string city, string state, string zip, Nullable<int> streetId, Nullable<int> streets_id, Nullable<int> person_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var aPNParameter = aPN != null ?
                new ObjectParameter("APN", aPN) :
                new ObjectParameter("APN", typeof(string));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var streetIdParameter = streetId.HasValue ?
                new ObjectParameter("StreetId", streetId) :
                new ObjectParameter("StreetId", typeof(int));
    
            var streets_idParameter = streets_id.HasValue ?
                new ObjectParameter("Streets_id", streets_id) :
                new ObjectParameter("Streets_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ParcelsUpdate_Result>("usp_ParcelsUpdate", idParameter, aPNParameter, ownerIdParameter, addressParameter, cityParameter, stateParameter, zipParameter, streetIdParameter, streets_idParameter, person_idParameter);
        }
    
        public virtual int usp_PeopleDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PeopleDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_PeopleInsert_Result> usp_PeopleInsert(string name, string address, string city, string state, string zip, string phone, string altPhone, string email)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var altPhoneParameter = altPhone != null ?
                new ObjectParameter("AltPhone", altPhone) :
                new ObjectParameter("AltPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PeopleInsert_Result>("usp_PeopleInsert", nameParameter, addressParameter, cityParameter, stateParameter, zipParameter, phoneParameter, altPhoneParameter, emailParameter);
        }
    
        public virtual ObjectResult<usp_PeopleSelect_Result> usp_PeopleSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PeopleSelect_Result>("usp_PeopleSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_PeopleUpdate_Result> usp_PeopleUpdate(Nullable<int> id, string name, string address, string city, string state, string zip, string phone, string altPhone, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var altPhoneParameter = altPhone != null ?
                new ObjectParameter("AltPhone", altPhone) :
                new ObjectParameter("AltPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PeopleUpdate_Result>("usp_PeopleUpdate", idParameter, nameParameter, addressParameter, cityParameter, stateParameter, zipParameter, phoneParameter, altPhoneParameter, emailParameter);
        }
    
        public virtual ObjectResult<usp_ProjectListSelect_Result> usp_ProjectListSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectListSelect_Result>("usp_ProjectListSelect");
        }
    
        public virtual int usp_ProjectsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProjectsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_ProjectsInsert_Result> usp_ProjectsInsert(string planCheckNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> finalSignOff, string name, Nullable<bool> active, string addressNumber, Nullable<int> streetId, string aPN, string projectType, Nullable<bool> plansReceived, Nullable<bool> onHold, string holdDescription, string notes, Nullable<bool> oct2007Related, Nullable<bool> seeFileCabinet, Nullable<int> contactId, Nullable<int> landscapeContactId, Nullable<int> propertyOwnerId, Nullable<int> constructionType, Nullable<bool> basement, Nullable<int> sprinklerContractorId, Nullable<int> originalSqFt, Nullable<int> stories, Nullable<int> sqFtAdded, string fireFlow, Nullable<int> uFCYear, Nullable<int> parcelId, Nullable<int> street_id, Nullable<int> person_id)
        {
            var planCheckNumberParameter = planCheckNumber != null ?
                new ObjectParameter("PlanCheckNumber", planCheckNumber) :
                new ObjectParameter("PlanCheckNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finalSignOffParameter = finalSignOff.HasValue ?
                new ObjectParameter("FinalSignOff", finalSignOff) :
                new ObjectParameter("FinalSignOff", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var addressNumberParameter = addressNumber != null ?
                new ObjectParameter("AddressNumber", addressNumber) :
                new ObjectParameter("AddressNumber", typeof(string));
    
            var streetIdParameter = streetId.HasValue ?
                new ObjectParameter("StreetId", streetId) :
                new ObjectParameter("StreetId", typeof(int));
    
            var aPNParameter = aPN != null ?
                new ObjectParameter("APN", aPN) :
                new ObjectParameter("APN", typeof(string));
    
            var projectTypeParameter = projectType != null ?
                new ObjectParameter("ProjectType", projectType) :
                new ObjectParameter("ProjectType", typeof(string));
    
            var plansReceivedParameter = plansReceived.HasValue ?
                new ObjectParameter("PlansReceived", plansReceived) :
                new ObjectParameter("PlansReceived", typeof(bool));
    
            var onHoldParameter = onHold.HasValue ?
                new ObjectParameter("OnHold", onHold) :
                new ObjectParameter("OnHold", typeof(bool));
    
            var holdDescriptionParameter = holdDescription != null ?
                new ObjectParameter("HoldDescription", holdDescription) :
                new ObjectParameter("HoldDescription", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var oct2007RelatedParameter = oct2007Related.HasValue ?
                new ObjectParameter("Oct2007Related", oct2007Related) :
                new ObjectParameter("Oct2007Related", typeof(bool));
    
            var seeFileCabinetParameter = seeFileCabinet.HasValue ?
                new ObjectParameter("SeeFileCabinet", seeFileCabinet) :
                new ObjectParameter("SeeFileCabinet", typeof(bool));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var landscapeContactIdParameter = landscapeContactId.HasValue ?
                new ObjectParameter("LandscapeContactId", landscapeContactId) :
                new ObjectParameter("LandscapeContactId", typeof(int));
    
            var propertyOwnerIdParameter = propertyOwnerId.HasValue ?
                new ObjectParameter("PropertyOwnerId", propertyOwnerId) :
                new ObjectParameter("PropertyOwnerId", typeof(int));
    
            var constructionTypeParameter = constructionType.HasValue ?
                new ObjectParameter("ConstructionType", constructionType) :
                new ObjectParameter("ConstructionType", typeof(int));
    
            var basementParameter = basement.HasValue ?
                new ObjectParameter("Basement", basement) :
                new ObjectParameter("Basement", typeof(bool));
    
            var sprinklerContractorIdParameter = sprinklerContractorId.HasValue ?
                new ObjectParameter("SprinklerContractorId", sprinklerContractorId) :
                new ObjectParameter("SprinklerContractorId", typeof(int));
    
            var originalSqFtParameter = originalSqFt.HasValue ?
                new ObjectParameter("OriginalSqFt", originalSqFt) :
                new ObjectParameter("OriginalSqFt", typeof(int));
    
            var storiesParameter = stories.HasValue ?
                new ObjectParameter("Stories", stories) :
                new ObjectParameter("Stories", typeof(int));
    
            var sqFtAddedParameter = sqFtAdded.HasValue ?
                new ObjectParameter("SqFtAdded", sqFtAdded) :
                new ObjectParameter("SqFtAdded", typeof(int));
    
            var fireFlowParameter = fireFlow != null ?
                new ObjectParameter("FireFlow", fireFlow) :
                new ObjectParameter("FireFlow", typeof(string));
    
            var uFCYearParameter = uFCYear.HasValue ?
                new ObjectParameter("UFCYear", uFCYear) :
                new ObjectParameter("UFCYear", typeof(int));
    
            var parcelIdParameter = parcelId.HasValue ?
                new ObjectParameter("ParcelId", parcelId) :
                new ObjectParameter("ParcelId", typeof(int));
    
            var street_idParameter = street_id.HasValue ?
                new ObjectParameter("Street_id", street_id) :
                new ObjectParameter("Street_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectsInsert_Result>("usp_ProjectsInsert", planCheckNumberParameter, dateParameter, finalSignOffParameter, nameParameter, activeParameter, addressNumberParameter, streetIdParameter, aPNParameter, projectTypeParameter, plansReceivedParameter, onHoldParameter, holdDescriptionParameter, notesParameter, oct2007RelatedParameter, seeFileCabinetParameter, contactIdParameter, landscapeContactIdParameter, propertyOwnerIdParameter, constructionTypeParameter, basementParameter, sprinklerContractorIdParameter, originalSqFtParameter, storiesParameter, sqFtAddedParameter, fireFlowParameter, uFCYearParameter, parcelIdParameter, street_idParameter, person_idParameter);
        }
    
        public virtual ObjectResult<usp_ProjectsSelect_Result> usp_ProjectsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectsSelect_Result>("usp_ProjectsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_ProjectsUpdate_Result> usp_ProjectsUpdate(Nullable<int> id, string planCheckNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> finalSignOff, string name, Nullable<bool> active, string addressNumber, Nullable<int> streetId, string aPN, string projectType, Nullable<bool> plansReceived, Nullable<bool> onHold, string holdDescription, string notes, Nullable<bool> oct2007Related, Nullable<bool> seeFileCabinet, Nullable<int> contactId, Nullable<int> landscapeContactId, Nullable<int> propertyOwnerId, Nullable<int> constructionType, Nullable<bool> basement, Nullable<int> sprinklerContractorId, Nullable<int> originalSqFt, Nullable<int> stories, Nullable<int> sqFtAdded, string fireFlow, Nullable<int> uFCYear, Nullable<int> parcelId, Nullable<int> street_id, Nullable<int> person_id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var planCheckNumberParameter = planCheckNumber != null ?
                new ObjectParameter("PlanCheckNumber", planCheckNumber) :
                new ObjectParameter("PlanCheckNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finalSignOffParameter = finalSignOff.HasValue ?
                new ObjectParameter("FinalSignOff", finalSignOff) :
                new ObjectParameter("FinalSignOff", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var addressNumberParameter = addressNumber != null ?
                new ObjectParameter("AddressNumber", addressNumber) :
                new ObjectParameter("AddressNumber", typeof(string));
    
            var streetIdParameter = streetId.HasValue ?
                new ObjectParameter("StreetId", streetId) :
                new ObjectParameter("StreetId", typeof(int));
    
            var aPNParameter = aPN != null ?
                new ObjectParameter("APN", aPN) :
                new ObjectParameter("APN", typeof(string));
    
            var projectTypeParameter = projectType != null ?
                new ObjectParameter("ProjectType", projectType) :
                new ObjectParameter("ProjectType", typeof(string));
    
            var plansReceivedParameter = plansReceived.HasValue ?
                new ObjectParameter("PlansReceived", plansReceived) :
                new ObjectParameter("PlansReceived", typeof(bool));
    
            var onHoldParameter = onHold.HasValue ?
                new ObjectParameter("OnHold", onHold) :
                new ObjectParameter("OnHold", typeof(bool));
    
            var holdDescriptionParameter = holdDescription != null ?
                new ObjectParameter("HoldDescription", holdDescription) :
                new ObjectParameter("HoldDescription", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var oct2007RelatedParameter = oct2007Related.HasValue ?
                new ObjectParameter("Oct2007Related", oct2007Related) :
                new ObjectParameter("Oct2007Related", typeof(bool));
    
            var seeFileCabinetParameter = seeFileCabinet.HasValue ?
                new ObjectParameter("SeeFileCabinet", seeFileCabinet) :
                new ObjectParameter("SeeFileCabinet", typeof(bool));
    
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var landscapeContactIdParameter = landscapeContactId.HasValue ?
                new ObjectParameter("LandscapeContactId", landscapeContactId) :
                new ObjectParameter("LandscapeContactId", typeof(int));
    
            var propertyOwnerIdParameter = propertyOwnerId.HasValue ?
                new ObjectParameter("PropertyOwnerId", propertyOwnerId) :
                new ObjectParameter("PropertyOwnerId", typeof(int));
    
            var constructionTypeParameter = constructionType.HasValue ?
                new ObjectParameter("ConstructionType", constructionType) :
                new ObjectParameter("ConstructionType", typeof(int));
    
            var basementParameter = basement.HasValue ?
                new ObjectParameter("Basement", basement) :
                new ObjectParameter("Basement", typeof(bool));
    
            var sprinklerContractorIdParameter = sprinklerContractorId.HasValue ?
                new ObjectParameter("SprinklerContractorId", sprinklerContractorId) :
                new ObjectParameter("SprinklerContractorId", typeof(int));
    
            var originalSqFtParameter = originalSqFt.HasValue ?
                new ObjectParameter("OriginalSqFt", originalSqFt) :
                new ObjectParameter("OriginalSqFt", typeof(int));
    
            var storiesParameter = stories.HasValue ?
                new ObjectParameter("Stories", stories) :
                new ObjectParameter("Stories", typeof(int));
    
            var sqFtAddedParameter = sqFtAdded.HasValue ?
                new ObjectParameter("SqFtAdded", sqFtAdded) :
                new ObjectParameter("SqFtAdded", typeof(int));
    
            var fireFlowParameter = fireFlow != null ?
                new ObjectParameter("FireFlow", fireFlow) :
                new ObjectParameter("FireFlow", typeof(string));
    
            var uFCYearParameter = uFCYear.HasValue ?
                new ObjectParameter("UFCYear", uFCYear) :
                new ObjectParameter("UFCYear", typeof(int));
    
            var parcelIdParameter = parcelId.HasValue ?
                new ObjectParameter("ParcelId", parcelId) :
                new ObjectParameter("ParcelId", typeof(int));
    
            var street_idParameter = street_id.HasValue ?
                new ObjectParameter("Street_id", street_id) :
                new ObjectParameter("Street_id", typeof(int));
    
            var person_idParameter = person_id.HasValue ?
                new ObjectParameter("Person_id", person_id) :
                new ObjectParameter("Person_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProjectsUpdate_Result>("usp_ProjectsUpdate", idParameter, planCheckNumberParameter, dateParameter, finalSignOffParameter, nameParameter, activeParameter, addressNumberParameter, streetIdParameter, aPNParameter, projectTypeParameter, plansReceivedParameter, onHoldParameter, holdDescriptionParameter, notesParameter, oct2007RelatedParameter, seeFileCabinetParameter, contactIdParameter, landscapeContactIdParameter, propertyOwnerIdParameter, constructionTypeParameter, basementParameter, sprinklerContractorIdParameter, originalSqFtParameter, storiesParameter, sqFtAddedParameter, fireFlowParameter, uFCYearParameter, parcelIdParameter, street_idParameter, person_idParameter);
        }
    
        public virtual int usp_StreetsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StreetsDelete", idParameter);
        }
    
        public virtual ObjectResult<usp_StreetsInsert_Result> usp_StreetsInsert(string street1)
        {
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StreetsInsert_Result>("usp_StreetsInsert", street1Parameter);
        }
    
        public virtual ObjectResult<usp_StreetsSelect_Result> usp_StreetsSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StreetsSelect_Result>("usp_StreetsSelect", idParameter);
        }
    
        public virtual ObjectResult<usp_StreetsUpdate_Result> usp_StreetsUpdate(Nullable<int> id, string street1)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var street1Parameter = street1 != null ?
                new ObjectParameter("Street1", street1) :
                new ObjectParameter("Street1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StreetsUpdate_Result>("usp_StreetsUpdate", idParameter, street1Parameter);
        }
    }
}
